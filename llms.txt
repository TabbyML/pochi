# Getting Started
URL: /
Welcome to Pochi - Full-Stack AI Teammate Guide
***

title: "Getting Started"
description: "Welcome to Pochi - Full-Stack AI Teammate Guide"
icon: "Album"
-------------

# Welcome

Welcome to the ***Pochi docs*** - your comprehensive guide to using your Full-Stack AI Teammate. Here you'll find resources to help you get started, maximize productivity, and build amazing applications with state-of-the-art AI capabilities.

# What is Pochi?

Pochi is an AI agent designed for software development. It operates within your IDE, using a toolkit of commands to execute complex tasks, from code generation to project-wide refactoring.

Pochi's workflow is built on these principles:

* **Agent-Based Workflow**: You assign a task, and Pochi works autonomously to complete it. It can read files, execute commands, and apply changes to your codebase.
* **Flexible & Extensible**: Pochi's functionality is centered around a **Bring Your Own Key (BYOK)** model. This allows you to connect any supported LLM provider, giving you full control over the agent's "brain," your data privacy, and operational costs. No account is required to use the BYOK model.
* **Cloud Services**: For teams that need collaborative features, we offer account-based services like shared task list, group billing. These services are optional and build upon the core functionality.

## Community & Support

**Interested in contributing or just engaging with the team?** We welcome your input through our [Discord Community](https://discord.com/invite/tWF66yr8NQ)! Feel free to share feedback, report bugs, and suggest features there!

We're always looking to improve this documentation as well. If you have suggestions or find areas that could be enhanced, please let us know in our Discord channel. Your feedback helps make Pochi better for everyone!

## Quick Start

Watch this demo video showcasing the end-to-end experience with Pochi - from extension installation and registration to starting a task and seeing the results:

<div
  style={{
  position: "relative",
  paddingBottom: "53.7%",
  height: 0,
  overflow: "hidden",
  maxWidth: "100%",
}}
>
  <iframe
    src="https://drive.google.com/file/d/1CDxAcO9WGFFC45x5a5HDFdT4u6rtdJrB/preview"
    style={{
    position: "absolute",
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    border: "none",
    borderRadius: "8px",
  }}
    allowFullScreen
    title="Pochi Demo - End-to-End Experience"
  />
</div>

*This video demonstrates the core agent workflow: installing the extension, assigning a task, and letting Pochi work to produce the result. Note: Registration is optional and only required for cloud-based services.*


# Installation
URL: /installation
Get started with Pochi quickly
***

title: "Installation"
description: "Get started with Pochi quickly"
icon: "Axe"
-----------

# Installation

You can get started with Pochi by installing Pochi's VSCode extension.

### 1. Install the VSCode Extension

Install the Pochi extension from the [VSCode Marketplace](https://marketplace.visualstudio.com/items?itemName=TabbyML.pochi).

1. Open the Extensions view (`Ctrl+Shift+X` or `Cmd+Shift+X`).
2. Search for `Pochi` and click **Install**.

Once installed, the Pochi icon will appear in your Activity Bar.

<Callout title="Getting Started">
  ‚úÖ You should see the Pochi chat window appear in your VSCode editor!
</Callout>

### 2. Configure an LLM Endpoint (BYOK)

Pochi operates as an AI agent and requires a connection to a Large Language Model (LLM). The primary way to configure this is through the **Bring Your Own Key (BYOK)** model. This approach gives you full control over model choice, costs, and data privacy. Pochi account registration is optional with BYOK.

To connect your LLM provider:

1. In VSCode, open Pochi's model selection menu.
2. Click **Manage custom models** from the dropdown ‚Äî this will open VSCode settings with Pochi's configuration highlighted.

<div style={{ display: 'flex' }}>
  <img style={{ margin: '0px 25px' }} src="/images/introduction/manage-custom-model.png" alt="Pochi's Built-in Tools" width="50%" />
</div>

3. Add your API key and configure your model in `pochi.customModelSettings`.

<Callout title="Max tokens & Context window">
  You can configure `maxTokens` and `contextWindow` for each model in custom model settings.

  `maxTokens` is the length of responses and `contextWindow` is how much conversation history the model considers. These values depend on your provider and chosen model ‚Äî check your provider's documentation for the supported limits. As a rule of thumb: smaller values are faster and cheaper, larger values give Pochi more room to reason and remember.
</Callout>

### 3. Assign a Task

Once the extension is configured, you can assign tasks to the Pochi. Open the Pochi chat window and describe the task in detail.

For example:

```
Refactor the `ApiService` class in `src/lib/api.ts` to use `axios` instead of `fetch`. Ensure all existing method signatures are preserved and update error handling to use axios-specific error objects.
```

## Cloud-based Features

For teams needing collaborative tools or centralized billing, we offer optional cloud-based services. Creating a Pochi account gives you access to:

* Pochi's managed LLM models.
* Shared task histories and team management.
* Integrations with GitHub and Slack for a collaborative workflow.

To use these features, sign up at [app.getpochi.com](http://app.getpochi.com) and connect your GitHub account in your profile settings.


# MCP
URL: /mcp
Model Context Protocol integration and configuration
***

title: MCP
description: Model Context Protocol integration and configuration
icon: "Spline"
--------------

# MCP (Model Context Protocol)

The **Model Context Protocol (MCP)** revolutionizes how Pochi interacts with external services, databases, and APIs. Think of MCP as a universal adapter that connects Pochi to virtually any data source or tool, dramatically expanding what your AI assistant can accomplish.

## What is MCP?

Model Context Protocol is an open standard that allows AI applications to securely connect with external resources. It's like having a universal translator that lets Pochi communicate with databases, APIs, cloud services, and custom tools using a common language.

### Key Concepts

* **MCP Servers**: Small programs that expose specific functionality to Pochi
* **Tools**: Functions that Pochi can execute through MCP servers
* **Resources**: Read-only data sources like files or database queries
* **Transport**: Communication method (local processes or remote HTTP endpoints)

### How It Works

1. You configure MCP servers in Pochi's settings
2. Pochi discovers available tools from each connected server
3. When you chat with Pochi, it can use these tools to accomplish tasks
4. All tool executions require your explicit approval for security

## Real-World User Stories

### üîç Automated PR Review Workflow

*"Streamline code review process with intelligent GitHub integration"*

**Setup**: Connect GitHub MCP server with repository access

**Result**: Pochi can automatically review PRs, check code quality, suggest improvements, and manage PR lifecycle
**Value**: Faster code review cycles with consistent quality standards

### üé≠ Component Validation with Playwright

*"Automatically test and validate UI components across different scenarios"*

**Setup**: Connect Playwright MCP server for automated browser testing

**Result**: Pochi generates components and automatically validates styling, interactions, and responsive behavior through Playwright tests
**Value**: Consistent component quality with automated visual regression testing

### üìä Database-Driven Development

*"Query, analyze, and deploy with integrated database operations"*

**Setup**: Connect PostgreSQL and AWS MCP servers
**Result**: Pochi can query your database, analyze performance, and deploy directly to AWS
**Value**: Streamlined development workflow with AI assistance

## Step-by-Step Setup Guide

### Manual VSCode Settings Configuration

For advanced users who prefer direct configuration:

#### Step 1: Open VSCode Settings

1. Open VS Code
2. Press `Cmd/Ctrl + ,` to open Settings
3. Search for "pochi mcp" or navigate to Extensions ‚Üí Pochi

#### Step 2: Edit settings.json

Add to your VS Code `settings.json`:

```json
{
  "pochi.mcpServers": {
    "playwright": {
      "command": "npx",
      "args": ["playwright-mcp-server"]
    },
    "context7": {
      "command": "npx",
      "args": ["@upstash/context7-mcp"]
    },
    "github": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-github"],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "your-github-token"
      }
    }
  }
}
```

#### Step 3: Restart VSCode

Restart VSCode for the changes to take effect.

## Configuration Examples

### Local MCP Servers (Stdio Transport)

#### Filesystem Access

```json
{
  "filesystem": {
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-filesystem",
      "/path/to/allowed/files"
    ],
    "env": {
      "HOME": "/Users/yourname"
    }
  }
}
```

#### Database Connection

```json
{
  "postgres": {
    "command": "python",
    "args": ["-m", "mcp_postgres", "--connection-string"],
    "env": {
      "DATABASE_URL": "postgresql://user:pass@localhost:5432/db"
    }
  }
}
```

#### Web Search

```json
{
  "brave-search": {
    "command": "npx",
    "args": ["-y", "@modelcontextprotocol/server-brave-search"],
    "env": {
      "BRAVE_API_KEY": "your-brave-api-key"
    }
  }
}
```

### Remote MCP Servers (HTTP Transport)

#### Custom API Server

```json
{
  "my-api": {
    "url": "https://api.mycompany.com/mcp",
    "headers": {
      "Authorization": "Bearer your-api-token",
      "X-API-Version": "v1"
    }
  }
}
```

#### SSE (Server-Sent Events) Server

```json
{
  "realtime-data": {
    "url": "https://data.example.com/mcp/sse",
    "headers": {
      "Authorization": "Bearer your-token"
    }
  }
}
```

## Advanced Configuration

### Server Control Options

```json
{
  "my-server": {
    "command": "node",
    "args": ["server.js"],
    "disabled": false, // Enable/disable entire server
    "disabledTools": ["dangerous_tool"], // Disable specific tools
    "env": {
      "NODE_ENV": "production"
    }
  }
}
```


# Rules
URL: /rules
Define coding standards and development guidelines
***

title: Rules
description: Define coding standards and development guidelines
icon: "Ruler"
-------------

# Rules

You can provide custom instructions to Pochi by creating an `README.pochi.md` file. This is similar to CLAUDE.md or Cursor‚Äôs rules.

<Callout title="AGENTS.md support">
  Pochi also supports [AGENTS.md](https://agents.md) as an alternative to `README.pochi.md`. Both files serve the same purpose and are treated identically by Pochi.
</Callout>

### Example

Below example is the `README.pochi.md` file for Pochi itself.

```markdown
Pochi is an project developed using following technologies:
1. always use kebab-case for filenames.
2. always use camelCase for variables, functions.
3. use PascalCase for classes, interfaces, types.

# Testing for non packages/vscode
We use vitest framework.
our test use vitest framework.
test command: `bun run test`
coverage test command: `bun run test -- --coverage`

## Testing for packages/vscode
We use mocha framework, when creating test, do not use mocks for filesystem, just use vscode.workspace.fs to create files and folders, and only use mocha primitives for testing. use sinon for mocks.

(assuming cwd is packages/vscode)
test command: `bun run test`
coverage test command: `bun run test:coverage`

When encountering issues like `TypeError: Descriptor for property readFile is non-configurable and non-writable`, please use `proxyquire` to mock the module.

# Misc
1. use `bun check` to format / linting the code, use `bun fix` to automatically apply the fix.
2. use `bun tsc` to check the types.
3. For packages/code it uses `ink` for react terminal ui.
4. Prefer `@/lib` over `../lib` for imports.
5. For global variable in typescript, prefer using PascalCase, e.g `GlobalVariableName`, instead of `GLOBAL_VARIABLE_NAME`.
6. For biome related warning / errors, prefer using `bun fix` in the root directory to fix the issues.
```

## Locations

Pochi looks for rules in two locations:

### Workspace

Pochi first checks for a `README.pochi.md` (or `AGENTS.md`) file in your current workspace root directory. This is where you define project-specific rules that apply only to your current project.

### Global

Pochi also reads global rules defined in `~/.pochi/README.pochi.md`. These rules apply to all projects and are suitable for any personal rules that Pochi should follow.

You can view current active rules in toolbar's token usage popover

<p align="center">
  ![Token Usage](../assets/images/usage-token-popover.png)
</p>


# Tab Completion
URL: /tab-completion
Inline code completion
***

title: Tab Completion
description: Inline code completion
icon: "Code"
------------

# Tab Completion

**Tab Completion** is Pochi's in-editor inline code completion feature that provides AI-powered suggestions as you type, helping you write code faster and more efficiently.

Pochi uses a state-of-the-art model that adapts to your coding patterns in real time,
drawing on recent edits, diagnostics, and surrounding context to generate helpful,
relevant completions right in your editor.

<p align="center">
  ![Tab completion showing inline suggestions](../assets/images/completion.png)
</p>

### Multi-Language Support

Works across popular programming languages including:

* JavaScript/TypeScript
* Python
* Java
* C/C++
* Go
* Rust
* And many more

## Using Tab Completion

### Basic Usage

1. Start typing your code
2. Pochi will show inline suggestions in gray text
3. Press `Tab` to accept the suggestion
4. Press `Escape` to dismiss the suggestion

### Keyboard Shortcuts

| Key            | Action                                      |
| -------------- | ------------------------------------------- |
| `Tab`          | Accept the current suggestion               |
| `Escape`       | Dismiss the suggestion                      |
| `Ctrl/Cmd + ‚Üí` | Accept word by word                         |
| `Alt + ]`      | Next suggestion (if multiple available)     |
| `Alt + [`      | Previous suggestion (if multiple available) |

***

**Need help?** Visit our [Community Support](/community-support) page or join our [Discord](https://discord.com/invite/tWF66yr8NQ) for assistance with Tab Completion features.


# Toolbar
URL: /toolbar
Functions provided in Pochi's input toolbar
***

title: Toolbar
description: Functions provided in Pochi's input toolbar
icon: "Waypoints"
-----------------

# Toolbar

### Share

The **Share** feature in Pochi's toolbar allows you to share your current development context with team members.

<Callout type="info" title="Public Access">
  Shared conversations are publicly accessible to anyone with the link. Do not share sensitive information or private code.
</Callout>

<p align="center">
  ![Task Sharing](../assets/images/task-sharing.png)
</p>

### Auto-Approve

By default, all permissions in Pochi are enabled. You can customize these permissions at any time using the Auto-Approve settings.

<p align="center">
  ![Auto Approve](../assets/images/auto-approve.png)
</p>

* **Read**: Read the file content Pochi decides to look up for analyzing or completing tasks.
* **Write**: Creates new files, edits existing code, generates boilerplate, and writes documentation.
* **Execute**: Manages dependencies, runs builds, tests, and perform system operations.
* **Use MCP**: Interacts with databases, APIs, and other external services to expand its capabilities with MCP server.
* **Retry**: Automatically retries failed commands, code changes, and installations.


# Tools & Integrations
URL: /tools-integrations
Connect Pochi with your existing development tools
***

title: Tools & Integrations
description: Connect Pochi with your existing development tools
icon: "Wrench"
--------------

# Agent Toolset & Cloud Integrations

Pochi's capabilities are divided into its core agent toolset and optional cloud integrations.

## Core Agent Toolset

The Pochi agent comes equipped with a set of built-in tools that allow it to interact with your local development environment. These tools are fundamental to its operation and are available by default, regardless of whether you have an account.

Key tools include:

* **File System Access**: Read, write, and modify files.
* **Command Execution**: Run shell commands and scripts.
* **Code Search**: Perform regex-based searches across your codebase.

These tools enable the agent to perform complex, multi-step tasks like refactoring code, adding features, and fixing bugs autonomously. You can review the full list of available tools in the Pochi extension settings.

<p align="center">
  ![Pochi's Built-in Tools](../assets/images/built-in-tools.png)
</p>

## Cloud Integrations

For teams and developers who need collaborative features, we offer optional cloud-based integrations. These require a Pochi account and connect the agent to external services.

### GitHub

Connecting your GitHub account allows the agent to:

* Clone repositories and understand their full context.
* Create and review pull requests.
* Track and manage issues.
* Handle branch management and resolve merge conflicts.

### Slack

Our Slack integration is currently experimental. The goal is to enable seamless collaboration by allowing you to:

* Assign tasks to the Pochi agent directly from Slack channels.
* Receive real-time progress updates in conversation threads.


# Troubleshooting
URL: /troubleshooting
Common issues and how to resolve them
***

title: "Troubleshooting"
icon: "CircleQuestionMark"
description: "Common issues and how to resolve them"
----------------------------------------------------

# Troubleshooting

To debug any issues with Pochi, you can check the logs from webview console or vscode output console.

### Webview Console

1. Open `Developer: Use Webview Developer Tools` command in VSCode
2. Go to the Console tab
3. Look for error messages related to Pochi

You can configure the log level in VSCode Settings with following snippet

```json
{
  "pochi.advanced": {
      "webviewLogLevel": "DEBUG" // Set to "DEBUG" to see more detailed logs
  },
}
```

### VSCode Output Console

1. Use `Output: Show Output Channels` command in VSCode
2. Select "Pochi" from the dropdown
3. Look for error messages or warnings

# Getting help

If you‚Äôre experiencing issues with Pochi:

1. Report issues on Github

   The best way to report bugs or request features is through our GitHub repository: github.com/TabbyML/pochi/issues

2. Join our Discord

   For real-time help and community discussion, join our Discord server: [https://getpochi.com/discord](https://getpochi.com/discord)


# Workflows
URL: /workflows
Automate common development sequences
***

title: Workflows
description: Automate common development sequences
icon: "Workflow"
----------------

# Workflows

## What are Workflows?

Workflows are step-by-step automation templates that guide Pochi through complex, multi-step processes. Think of them as detailed recipes that Pochi can follow to complete common development tasks consistently and efficiently.

Key Benefits:

* Consistency - Same process every time, reducing human error
* Efficiency - Automate repetitive multi-step tasks
* Knowledge Sharing - Capture team expertise in reusable templates

## Prerequisites

Before using workflows, you will need:

* VS Code with Pochi extension installed
* Local repository setup: Clone the repository locally to access workflows
* Workflows stored in the `.pochi/workflows/` directory

## Creating Workflows

Reusable patterns in `.pochi/workflows/`:

Example: `.pochi/workflows/create-pr.md`

```
Please help create a PR for the current staging changes, following these guidelines:
- If there are no staging changes but there are uncommitted changes, please stage them first.
- Create a branch name based on the current git diff status.
- Write a meaningful commit message/PR title.
- Use the gh CLI to create a PR.
- When running the push operation, it might be aborted due to a husky pre-push hook. For formatting issues, amend the files and try again. For other issues, try to resolve them as much as possible.
- The base branch for the PR should always be `main`.
- Always push the branch to the remote repository before creating the PR.

When creating PR with markdown description, pay attention to escape backticks, otherwise it will be executed as command substitution in the shell.

```

Example: `.pochi/workflows/review-pr.md`

```
Please help review a PR using the gh CLI:
- Ask user which PR to review (by number, URL, or from list)
- Use `gh pr view` and `gh pr diff` to examine changes
- Analyze code quality, security, tests, and documentation
- Check adherence to project coding standards
- Use askFollowupQuestion to let user choose:
  - "Approve" - Submit approving review
  - "Request Changes" - Submit review with change requests
  - "Comment Only" - Add comments without approval/rejection
  - "More Details" - Get additional information
- Submit review using `gh pr review` with appropriate feedback

```

## How to Use Workflows in VS Code

Once your workflows are set up, using them is straightforward:

1. **Type `/` in VS Code** to trigger the Pochi workflow selector
2. **Select a workflow** from the dropdown menu
3. Pochi executes the workflow automatically

For best efficiency and accuracy, always use the `/` command rather than manually describing the workflow steps to Pochi.

<div
  style={{
  position: "relative",
  paddingBottom: "53.7%",
  height: 0,
  overflow: "hidden",
  maxWidth: "100%",
}}
>
  <iframe
    src="https://drive.google.com/file/d/1p9UeAfkLEOlXBABF4CGub_aqAlAnmbVe/preview"
    style={{
    position: "absolute",
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    border: "none",
    borderRadius: "8px",
  }}
    allowFullScreen
    title="Pochi Demo - Workflows"
  />
</div>

*This video demonstrates how to use workflows in VS Code*
