#!/bin/bash
set -euo pipefail

# pochi GitHub Action publisher
# This script helps publish a new version of the GitHub Action

echo "üì¶ pochi GitHub Action publisher"
echo "==============================="

# Check if we're in the right directory
if [ ! -f "action.yml" ] || [ ! -f "package.json" ]; then
    echo "‚ùå Error: Not in the GitHub Action directory"
    echo "Please run this script from packages/github-action/"
    exit 1
fi

# Get current version
CURRENT_VERSION=$(node -p "require('./package.json').version")
echo "üìã Current version: $CURRENT_VERSION"

# Ask for new version
read -p "Enter new version (or press Enter to skip versioning): " NEW_VERSION

if [ -n "$NEW_VERSION" ]; then
    echo "üîÑ Updating version to $NEW_VERSION..."
    
    # Update package.json
    node -e "
    const pkg = require('./package.json');
    pkg.version = '$NEW_VERSION';
    require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
    "
    
    echo "‚úÖ Version updated in package.json"
fi

# Build the action (if needed)
echo "üî® Building action..."
if command -v bun &> /dev/null; then
    bun install
    # bun build index.ts --outfile dist/index.js --target node
else
    npm install
    # npm run build
fi

# Check if git is clean
if ! git diff-index --quiet HEAD --; then
    echo "‚ö†Ô∏è  Warning: Working directory is not clean"
    echo "The following files have changes:"
    git diff-index --name-only HEAD
    echo ""
    
    read -p "Do you want to commit these changes? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        git add .
        COMMIT_MSG="Release pochi GitHub Action"
        if [ -n "$NEW_VERSION" ]; then
            COMMIT_MSG="$COMMIT_MSG v$NEW_VERSION"
        fi
        git commit -m "$COMMIT_MSG"
        echo "‚úÖ Changes committed"
    else
        echo "‚ùå Please commit or stash your changes before publishing"
        exit 1
    fi
fi

# Create/update tags with action prefix
if [ -n "$NEW_VERSION" ]; then
    echo "üè∑Ô∏è  Creating tag action@$NEW_VERSION..."
    git tag -a "action@$NEW_VERSION" -m "Release action@$NEW_VERSION"
    
    # Also update major version tag (e.g., action@0)
    MAJOR_VERSION=$(echo "$NEW_VERSION" | cut -d. -f1)
    echo "üè∑Ô∏è  Updating major version tag action@$MAJOR_VERSION..."
    git tag -f "action@$MAJOR_VERSION"
    
    echo "üì§ Pushing tags..."
    git push origin "action@$NEW_VERSION"
    git push -f origin "action@$MAJOR_VERSION"
    
    echo "‚úÖ Tags created and pushed"
fi

# Push to current branch
CURRENT_BRANCH=$(git branch --show-current)
read -p "Do you want to push to the current branch ($CURRENT_BRANCH)? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "üì§ Pushing to $CURRENT_BRANCH branch..."
    git push origin "$CURRENT_BRANCH"
    echo "‚úÖ Pushed to $CURRENT_BRANCH branch"
fi

echo ""
echo "üéâ pochi GitHub Action published successfully!"

if [ -n "$NEW_VERSION" ]; then
    echo ""
    echo "üìã Users can now use this action with:"
    echo "uses: tabbyml/pochi/packages/github-action@action@$NEW_VERSION"
    echo "or"
    echo "uses: tabbyml/pochi/packages/github-action@action@$MAJOR_VERSION"
    echo "or"  
    echo "uses: tabbyml/pochi/packages/github-action@action@latest"
    echo ""
    echo "üìù Example workflow:"
    echo "- uses: tabbyml/pochi/packages/github-action@action@latest"
    echo "  env:"
    echo "    POCHI_TOKEN: \${{ secrets.POCHI_TOKEN }}"
fi

# Get repository information for releases link
REPO_OWNER=$(git remote get-url origin | sed -n 's#.*github\.com[:/]\([^/]*\)/.*#\1#p')
REPO_NAME=$(git remote get-url origin | sed -n 's#.*github\.com[:/][^/]*/\([^/]*\).*#\1#p' | sed 's/\.git$//')

echo ""
echo "üîó GitHub releases: https://github.com/$REPO_OWNER/$REPO_NAME/releases"